generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int                @id @default(autoincrement())
  email                  String             @unique
  password               String
  username               String             @unique
  profilePicture         String?
  bio                    String?
  website                String?
  userID                 String             @unique
  posts                  Post[]
  likes                  Like[]             // User's likes
  comments               Comment[]          // User's comments
  notificationsReceived  Notification[]     @relation("NotificationRecipient") // Notifications for this user
  notificationsSent      Notification[]     @relation("NotificationSender")    // Notifications created by this user

  // Self-relation: many-to-many for mutual friendships
  friends                User[]             @relation("UserFriends")
  friendOf               User[]             @relation("UserFriends")

  // Friend Requests
  friendRequestsSent     FriendRequest[]    @relation("SentRequests")
  friendRequestsReceived FriendRequest[]    @relation("ReceivedRequests")

  // Chat
  sentMessages           ChatMessage[]      @relation("SenderMessages")
  receivedMessages       ChatMessage[]      @relation("ReceiverMessages")

  // Follows
  followers              Follow[]           @relation("UserFollowers")
  following              Follow[]           @relation("UserFollowing")
}

model Post {
  id        Int      @id @default(autoincrement())
  content   String?
  imageUrl  String?
  audioUrl  String?   // New field for audio
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  likes     Like[]    // Post's likes
  comments  Comment[] // Post's comments
  notifications        Notification[] // Notifications associated with this post
}

model FriendRequest {
  id          Int       @id @default(autoincrement())
  senderId    Int
  receiverId  Int
  status      String
  createdAt   DateTime  @default(now())

  // Access toggles
  chatEnabled  Boolean?
  videoEnabled Boolean?
  feedEnabled  Boolean?

  sender    User @relation("SentRequests", fields: [senderId], references: [id])
  receiver  User @relation("ReceivedRequests", fields: [receiverId], references: [id])
}

model ChatMessage {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  message    String
  timestamp  DateTime @default(now())

  sender     User     @relation("SenderMessages", fields: [senderId], references: [id])
  receiver   User     @relation("ReceiverMessages", fields: [receiverId], references: [id])
}

model Follow {
  id          Int       @id @default(autoincrement())
  followerId  Int
  followingId Int
  status      String    @default("accepted")
  createdAt   DateTime  @default(now())

  follower    User      @relation("UserFollowing", fields: [followerId], references: [id])
  following   User      @relation("UserFollowers", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade) // Cascade delete likes when post is deleted


  @@unique([userId, postId]) // Ensures a user can like a post only once
}

model Comment {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  content   String
  audioUrl  String?   // New field for audio
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade) // Cascade delete comments when post is deleted
}

model Notification {
  id        Int      @id @default(autoincrement())
  type      String   // e.g., "like", "comment"
  message   String   // Notification message
  postId    Int?     // Related post ID
  userId    Int      // User receiving the notification
  senderId  Int      // User who performed the action
  createdAt DateTime @default(now())
  read      Boolean  @default(false) // Add the 'read' field with default value false

  post      Post?    @relation(fields: [postId], references: [id])
  user      User     @relation("NotificationRecipient", fields: [userId], references: [id])  // Recipient
  sender    User     @relation("NotificationSender", fields: [senderId], references: [id])  // Action performer
}